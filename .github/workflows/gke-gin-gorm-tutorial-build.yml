name: staging build

defaults:
  run:
    shell: bash
    working-directory: ./gcp/gke/gin-gorm-tutorial
on:
  push:
    paths:
      - "gcp/gke/gin-gorm-tutorial/**"
    branches-ignore:
      - main

env:
  ENV_PREFIX: stg
  APP_NAME: gin-gorm-tutorial
  GCP_REGION: asia-northeast1
  GCP_PROJECT_ID: playground-318023
  TF_VAR_POSTGRES_DB_NAME: ${{ secrets.TF_VAR_POSTGRES_DB_NAME }}
  TF_VAR_POSTGRES_PASSWORD: ${{ secrets.TF_VAR_POSTGRES_PASSWORD }}
  WORK_DIR: ./gcp/gke/gin-gorm-tutorial
  GO_VERSION: 1.16.3

jobs:
  lint:
    name: go lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.41.1
          working-directory: ${{ env.WORK_DIR }}

  test:
    name: go test
    runs-on: ubuntu-latest
    env:
      TEST_POSTGRESQL_URL: "postgres://postgres:password@localhost:5432/test?sslmode=disable"
      DSN: "host=localhost user=postgres password=password dbname=test port=5432 sslmode=disable TimeZone=Asia/Tokyo"
      TEST_ENV: 1
      GIN_MODE: release
    services:
      db:
        image: postgres:13.3-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: set up golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: cache go module
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: install golang-migrate
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - name: db migrate
        run: migrate -database $TEST_POSTGRESQL_URL -path migrations up
      - name: execute test
        run: go test -v ./...

  terraformPlan:
    name: terraform plan
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}/infrastructure/prod
    steps:
      - name: check out
        uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
      - name: Terraform Init
        run: terraform init
      - name: terraform fmt
        id: fmt
        run: terraform fmt
      - name: terraform validate
        id: validate
        run: terraform validate
      - name: Install tfnotify
        id: install-tfnotify
        run: |
          sudo curl -fL -o tfnotify.tar.gz https://github.com/mercari/tfnotify/releases/download/v0.7.0/tfnotify_linux_amd64.tar.gz
          sudo tar -C /usr/bin -xzf ./tfnotify.tar.gz
      - name: Terraform Plan
        id: plan
        run: terraform plan | tfnotify -config ../../../../../.github/.tfnotify/github.yaml plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraformApply:
    name: terraform apply
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}/infrastructure/stg
    steps:
      - name: check out
        uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
      - name: Terraform Init
        run: terraform init
      - name: terraform fmt
        id: fmt
        run: terraform fmt
      - name: terraform validate
        id: validate
        run: terraform validate
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
