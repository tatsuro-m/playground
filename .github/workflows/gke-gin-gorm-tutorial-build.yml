name: staging build

defaults:
  run:
    shell: bash
    working-directory: ./gcp/gke/gin-gorm-tutorial
on:
  push:
#    paths:
#      - "gcp/gke/gin-gorm-tutorial/**"
#    branches-ignore:
#      - main

env:
  ENV_PREFIX: stg
  APP_NAME: gin-gorm-tutorial
  GCP_REGION: asia-northeast1
  GCP_PROJECT_ID: playground-318023
  TF_VAR_POSTGRES_DB_NAME: ${{ secrets.TF_VAR_POSTGRES_DB_NAME }}
  TF_VAR_POSTGRES_PASSWORD: ${{ secrets.TF_VAR_POSTGRES_PASSWORD }}

jobs:
  lint:
    name: go lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.41.1
          working-directory: ./gcp/gke/gin-gorm-tutorial

  test:
    name: go test
    runs-on: ubuntu-latest
    env:
      TEST_POSTGRESQL_URL: "postgres://postgres:password@localhost:5432/test?sslmode=disable"
      DSN: "host=localhost user=postgres password=password dbname=test port=5432 sslmode=disable TimeZone=Asia/Tokyo"
      TEST_ENV: 1
      GIN_MODE: release
    services:
      db:
        image: postgres:13.3-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: set up golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.3
      - name: install golang-migrate
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - name: db migrate
        run: migrate -database $TEST_POSTGRESQL_URL -path migrations up
      - name: execute test
        run: go test -v ./...

  build:
    name: container image build
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: authenticate registry
        run: gcloud auth configure-docker $GCP_REGION-docker.pkg.dev
      - name: image build and push
        run: |
          IMAGE_TAG=$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ENV_PREFIX-$APP_NAME-main/golang-api:$GITHUB_SHA
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

  migration:
    name: db migrate
    #    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      #  https://blog.fukkatsuso.com/posts/cloudsql-migration-action/  を参考にして改善する
      - name: install golang-migrate
        run: |
          curl -L https://packagecloud.io/golang-migrate/migrate/gpgkey | apt-key add -
          echo "deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/migrate.list
          apt-get update
          apt-get install -y migrate
      - name: install CloudSQL Auth Proxy
        run: wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy && chmod +x cloud_sql_proxy
      - name: run migrate
        env:
          POSTGRESQL_URL: "postgres://postgres:$TF_VAR_POSTGRES_PASSWORD@localhost:5432/$ENV_PREFIX-$APP_NAME-$TF_VAR_POSTGRES_DB_NAME?sslmode=disable"
        run: |
          ./cloud_sql_proxy -instances=$GCP_PROJECT_ID:$GCP_REGION:$ENV_PREFIX-$APP_NAME-master-instance1=tcp:5432 &
          sleep 3 &&
          migrate -database $POSTGRESQL_URL -path migrations up

  infrastructure:
    name: infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/

    steps:
      - name: check out
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1

      #      #  本番環境を apply したらどうなるかという差分を PR にコメントするために prod の方も init しておく
      #      - name: Terraform Init for production env
      #        run: terraform init
      #        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/production
      #
      #      - name: Install tfnotify
      #        id: install-tfnotify
      #        run: |
      #          sudo curl -fL -o tfnotify.tar.gz https://github.com/mercari/tfnotify/releases/download/v0.7.0/tfnotify_linux_amd64.tar.gz
      #          sudo tar -C /usr/bin -xzf ./tfnotify.tar.gz
      #
      #      - name: Terraform Plan
      #        id: plan
      #        run: terraform plan | tfnotify -config ../../../.github/.tfnotify/github.yaml plan
      #        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/production
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/stg

      - name: terraform fmt
        id: fmt
        run: terraform fmt
        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/stg

      - name: terraform validate
        id: validate
        run: terraform validate
        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/stg

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./gcp/gke/gin-gorm-tutorial/infrastructure/stg
