// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Municipality is an object representing the database table.
type Municipality struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	NameRoma     string    `boil:"name_roma" json:"name_roma" toml:"name_roma" yaml:"name_roma"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PrefectureID int       `boil:"prefecture_id" json:"prefecture_id" toml:"prefecture_id" yaml:"prefecture_id"`

	R *municipalityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L municipalityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MunicipalityColumns = struct {
	ID           string
	Name         string
	NameRoma     string
	CreatedAt    string
	UpdatedAt    string
	PrefectureID string
}{
	ID:           "id",
	Name:         "name",
	NameRoma:     "name_roma",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	PrefectureID: "prefecture_id",
}

var MunicipalityTableColumns = struct {
	ID           string
	Name         string
	NameRoma     string
	CreatedAt    string
	UpdatedAt    string
	PrefectureID string
}{
	ID:           "municipalities.id",
	Name:         "municipalities.name",
	NameRoma:     "municipalities.name_roma",
	CreatedAt:    "municipalities.created_at",
	UpdatedAt:    "municipalities.updated_at",
	PrefectureID: "municipalities.prefecture_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MunicipalityWhere = struct {
	ID           whereHelperint
	Name         whereHelperstring
	NameRoma     whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	PrefectureID whereHelperint
}{
	ID:           whereHelperint{field: "`municipalities`.`id`"},
	Name:         whereHelperstring{field: "`municipalities`.`name`"},
	NameRoma:     whereHelperstring{field: "`municipalities`.`name_roma`"},
	CreatedAt:    whereHelpertime_Time{field: "`municipalities`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`municipalities`.`updated_at`"},
	PrefectureID: whereHelperint{field: "`municipalities`.`prefecture_id`"},
}

// MunicipalityRels is where relationship names are stored.
var MunicipalityRels = struct {
	Prefecture  string
	PostalCodes string
	TownAreas   string
}{
	Prefecture:  "Prefecture",
	PostalCodes: "PostalCodes",
	TownAreas:   "TownAreas",
}

// municipalityR is where relationships are stored.
type municipalityR struct {
	Prefecture  *Prefecture     `boil:"Prefecture" json:"Prefecture" toml:"Prefecture" yaml:"Prefecture"`
	PostalCodes PostalCodeSlice `boil:"PostalCodes" json:"PostalCodes" toml:"PostalCodes" yaml:"PostalCodes"`
	TownAreas   TownAreaSlice   `boil:"TownAreas" json:"TownAreas" toml:"TownAreas" yaml:"TownAreas"`
}

// NewStruct creates a new relationship struct
func (*municipalityR) NewStruct() *municipalityR {
	return &municipalityR{}
}

// municipalityL is where Load methods for each relationship are stored.
type municipalityL struct{}

var (
	municipalityAllColumns            = []string{"id", "name", "name_roma", "created_at", "updated_at", "prefecture_id"}
	municipalityColumnsWithoutDefault = []string{"name", "name_roma", "prefecture_id"}
	municipalityColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	municipalityPrimaryKeyColumns     = []string{"id"}
)

type (
	// MunicipalitySlice is an alias for a slice of pointers to Municipality.
	// This should almost always be used instead of []Municipality.
	MunicipalitySlice []*Municipality
	// MunicipalityHook is the signature for custom Municipality hook methods
	MunicipalityHook func(context.Context, boil.ContextExecutor, *Municipality) error

	municipalityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	municipalityType                 = reflect.TypeOf(&Municipality{})
	municipalityMapping              = queries.MakeStructMapping(municipalityType)
	municipalityPrimaryKeyMapping, _ = queries.BindMapping(municipalityType, municipalityMapping, municipalityPrimaryKeyColumns)
	municipalityInsertCacheMut       sync.RWMutex
	municipalityInsertCache          = make(map[string]insertCache)
	municipalityUpdateCacheMut       sync.RWMutex
	municipalityUpdateCache          = make(map[string]updateCache)
	municipalityUpsertCacheMut       sync.RWMutex
	municipalityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var municipalityBeforeInsertHooks []MunicipalityHook
var municipalityBeforeUpdateHooks []MunicipalityHook
var municipalityBeforeDeleteHooks []MunicipalityHook
var municipalityBeforeUpsertHooks []MunicipalityHook

var municipalityAfterInsertHooks []MunicipalityHook
var municipalityAfterSelectHooks []MunicipalityHook
var municipalityAfterUpdateHooks []MunicipalityHook
var municipalityAfterDeleteHooks []MunicipalityHook
var municipalityAfterUpsertHooks []MunicipalityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Municipality) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Municipality) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Municipality) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Municipality) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Municipality) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Municipality) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Municipality) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Municipality) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Municipality) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range municipalityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMunicipalityHook registers your hook function for all future operations.
func AddMunicipalityHook(hookPoint boil.HookPoint, municipalityHook MunicipalityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		municipalityBeforeInsertHooks = append(municipalityBeforeInsertHooks, municipalityHook)
	case boil.BeforeUpdateHook:
		municipalityBeforeUpdateHooks = append(municipalityBeforeUpdateHooks, municipalityHook)
	case boil.BeforeDeleteHook:
		municipalityBeforeDeleteHooks = append(municipalityBeforeDeleteHooks, municipalityHook)
	case boil.BeforeUpsertHook:
		municipalityBeforeUpsertHooks = append(municipalityBeforeUpsertHooks, municipalityHook)
	case boil.AfterInsertHook:
		municipalityAfterInsertHooks = append(municipalityAfterInsertHooks, municipalityHook)
	case boil.AfterSelectHook:
		municipalityAfterSelectHooks = append(municipalityAfterSelectHooks, municipalityHook)
	case boil.AfterUpdateHook:
		municipalityAfterUpdateHooks = append(municipalityAfterUpdateHooks, municipalityHook)
	case boil.AfterDeleteHook:
		municipalityAfterDeleteHooks = append(municipalityAfterDeleteHooks, municipalityHook)
	case boil.AfterUpsertHook:
		municipalityAfterUpsertHooks = append(municipalityAfterUpsertHooks, municipalityHook)
	}
}

// One returns a single municipality record from the query.
func (q municipalityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Municipality, error) {
	o := &Municipality{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for municipalities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Municipality records from the query.
func (q municipalityQuery) All(ctx context.Context, exec boil.ContextExecutor) (MunicipalitySlice, error) {
	var o []*Municipality

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Municipality slice")
	}

	if len(municipalityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Municipality records in the query.
func (q municipalityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count municipalities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q municipalityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if municipalities exists")
	}

	return count > 0, nil
}

// Prefecture pointed to by the foreign key.
func (o *Municipality) Prefecture(mods ...qm.QueryMod) prefectureQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PrefectureID),
	}

	queryMods = append(queryMods, mods...)

	query := Prefectures(queryMods...)
	queries.SetFrom(query.Query, "`prefectures`")

	return query
}

// PostalCodes retrieves all the postal_code's PostalCodes with an executor.
func (o *Municipality) PostalCodes(mods ...qm.QueryMod) postalCodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`postal_codes`.`municipality_id`=?", o.ID),
	)

	query := PostalCodes(queryMods...)
	queries.SetFrom(query.Query, "`postal_codes`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`postal_codes`.*"})
	}

	return query
}

// TownAreas retrieves all the town_area's TownAreas with an executor.
func (o *Municipality) TownAreas(mods ...qm.QueryMod) townAreaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`town_areas`.`municipality_id`=?", o.ID),
	)

	query := TownAreas(queryMods...)
	queries.SetFrom(query.Query, "`town_areas`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`town_areas`.*"})
	}

	return query
}

// LoadPrefecture allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (municipalityL) LoadPrefecture(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMunicipality interface{}, mods queries.Applicator) error {
	var slice []*Municipality
	var object *Municipality

	if singular {
		object = maybeMunicipality.(*Municipality)
	} else {
		slice = *maybeMunicipality.(*[]*Municipality)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &municipalityR{}
		}
		args = append(args, object.PrefectureID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &municipalityR{}
			}

			for _, a := range args {
				if a == obj.PrefectureID {
					continue Outer
				}
			}

			args = append(args, obj.PrefectureID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`prefectures`),
		qm.WhereIn(`prefectures.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Prefecture")
	}

	var resultSlice []*Prefecture
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Prefecture")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for prefectures")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for prefectures")
	}

	if len(municipalityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Prefecture = foreign
		if foreign.R == nil {
			foreign.R = &prefectureR{}
		}
		foreign.R.Municipalities = append(foreign.R.Municipalities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PrefectureID == foreign.ID {
				local.R.Prefecture = foreign
				if foreign.R == nil {
					foreign.R = &prefectureR{}
				}
				foreign.R.Municipalities = append(foreign.R.Municipalities, local)
				break
			}
		}
	}

	return nil
}

// LoadPostalCodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (municipalityL) LoadPostalCodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMunicipality interface{}, mods queries.Applicator) error {
	var slice []*Municipality
	var object *Municipality

	if singular {
		object = maybeMunicipality.(*Municipality)
	} else {
		slice = *maybeMunicipality.(*[]*Municipality)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &municipalityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &municipalityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`postal_codes`),
		qm.WhereIn(`postal_codes.municipality_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load postal_codes")
	}

	var resultSlice []*PostalCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice postal_codes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on postal_codes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for postal_codes")
	}

	if len(postalCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PostalCodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postalCodeR{}
			}
			foreign.R.Municipality = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MunicipalityID {
				local.R.PostalCodes = append(local.R.PostalCodes, foreign)
				if foreign.R == nil {
					foreign.R = &postalCodeR{}
				}
				foreign.R.Municipality = local
				break
			}
		}
	}

	return nil
}

// LoadTownAreas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (municipalityL) LoadTownAreas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMunicipality interface{}, mods queries.Applicator) error {
	var slice []*Municipality
	var object *Municipality

	if singular {
		object = maybeMunicipality.(*Municipality)
	} else {
		slice = *maybeMunicipality.(*[]*Municipality)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &municipalityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &municipalityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`town_areas`),
		qm.WhereIn(`town_areas.municipality_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load town_areas")
	}

	var resultSlice []*TownArea
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice town_areas")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on town_areas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for town_areas")
	}

	if len(townAreaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TownAreas = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &townAreaR{}
			}
			foreign.R.Municipality = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MunicipalityID {
				local.R.TownAreas = append(local.R.TownAreas, foreign)
				if foreign.R == nil {
					foreign.R = &townAreaR{}
				}
				foreign.R.Municipality = local
				break
			}
		}
	}

	return nil
}

// SetPrefecture of the municipality to the related item.
// Sets o.R.Prefecture to related.
// Adds o to related.R.Municipalities.
func (o *Municipality) SetPrefecture(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Prefecture) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `municipalities` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"prefecture_id"}),
		strmangle.WhereClause("`", "`", 0, municipalityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PrefectureID = related.ID
	if o.R == nil {
		o.R = &municipalityR{
			Prefecture: related,
		}
	} else {
		o.R.Prefecture = related
	}

	if related.R == nil {
		related.R = &prefectureR{
			Municipalities: MunicipalitySlice{o},
		}
	} else {
		related.R.Municipalities = append(related.R.Municipalities, o)
	}

	return nil
}

// AddPostalCodes adds the given related objects to the existing relationships
// of the municipality, optionally inserting them as new records.
// Appends related to o.R.PostalCodes.
// Sets related.R.Municipality appropriately.
func (o *Municipality) AddPostalCodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostalCode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MunicipalityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `postal_codes` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"municipality_id"}),
				strmangle.WhereClause("`", "`", 0, postalCodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MunicipalityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &municipalityR{
			PostalCodes: related,
		}
	} else {
		o.R.PostalCodes = append(o.R.PostalCodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postalCodeR{
				Municipality: o,
			}
		} else {
			rel.R.Municipality = o
		}
	}
	return nil
}

// AddTownAreas adds the given related objects to the existing relationships
// of the municipality, optionally inserting them as new records.
// Appends related to o.R.TownAreas.
// Sets related.R.Municipality appropriately.
func (o *Municipality) AddTownAreas(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TownArea) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MunicipalityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `town_areas` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"municipality_id"}),
				strmangle.WhereClause("`", "`", 0, townAreaPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MunicipalityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &municipalityR{
			TownAreas: related,
		}
	} else {
		o.R.TownAreas = append(o.R.TownAreas, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &townAreaR{
				Municipality: o,
			}
		} else {
			rel.R.Municipality = o
		}
	}
	return nil
}

// Municipalities retrieves all the records using an executor.
func Municipalities(mods ...qm.QueryMod) municipalityQuery {
	mods = append(mods, qm.From("`municipalities`"))
	return municipalityQuery{NewQuery(mods...)}
}

// FindMunicipality retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMunicipality(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Municipality, error) {
	municipalityObj := &Municipality{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `municipalities` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, municipalityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from municipalities")
	}

	if err = municipalityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return municipalityObj, err
	}

	return municipalityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Municipality) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no municipalities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(municipalityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	municipalityInsertCacheMut.RLock()
	cache, cached := municipalityInsertCache[key]
	municipalityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			municipalityAllColumns,
			municipalityColumnsWithDefault,
			municipalityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(municipalityType, municipalityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(municipalityType, municipalityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `municipalities` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `municipalities` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `municipalities` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, municipalityPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into municipalities")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == municipalityMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for municipalities")
	}

CacheNoHooks:
	if !cached {
		municipalityInsertCacheMut.Lock()
		municipalityInsertCache[key] = cache
		municipalityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Municipality.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Municipality) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	municipalityUpdateCacheMut.RLock()
	cache, cached := municipalityUpdateCache[key]
	municipalityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			municipalityAllColumns,
			municipalityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update municipalities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `municipalities` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, municipalityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(municipalityType, municipalityMapping, append(wl, municipalityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update municipalities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for municipalities")
	}

	if !cached {
		municipalityUpdateCacheMut.Lock()
		municipalityUpdateCache[key] = cache
		municipalityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q municipalityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for municipalities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for municipalities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MunicipalitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), municipalityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `municipalities` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, municipalityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in municipality slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all municipality")
	}
	return rowsAff, nil
}

var mySQLMunicipalityUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Municipality) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no municipalities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(municipalityColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMunicipalityUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	municipalityUpsertCacheMut.RLock()
	cache, cached := municipalityUpsertCache[key]
	municipalityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			municipalityAllColumns,
			municipalityColumnsWithDefault,
			municipalityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			municipalityAllColumns,
			municipalityPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert municipalities, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`municipalities`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `municipalities` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(municipalityType, municipalityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(municipalityType, municipalityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for municipalities")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == municipalityMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(municipalityType, municipalityMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for municipalities")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for municipalities")
	}

CacheNoHooks:
	if !cached {
		municipalityUpsertCacheMut.Lock()
		municipalityUpsertCache[key] = cache
		municipalityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Municipality record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Municipality) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Municipality provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), municipalityPrimaryKeyMapping)
	sql := "DELETE FROM `municipalities` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from municipalities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for municipalities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q municipalityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no municipalityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from municipalities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for municipalities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MunicipalitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(municipalityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), municipalityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `municipalities` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, municipalityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from municipality slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for municipalities")
	}

	if len(municipalityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Municipality) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMunicipality(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MunicipalitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MunicipalitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), municipalityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `municipalities`.* FROM `municipalities` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, municipalityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MunicipalitySlice")
	}

	*o = slice

	return nil
}

// MunicipalityExists checks if the Municipality row exists.
func MunicipalityExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `municipalities` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if municipalities exists")
	}

	return exists, nil
}
