// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostalCode is an object representing the database table.
type PostalCode struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Number         int       `boil:"number" json:"number" toml:"number" yaml:"number"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PrefectureID   int       `boil:"prefecture_id" json:"prefecture_id" toml:"prefecture_id" yaml:"prefecture_id"`
	MunicipalityID int       `boil:"municipality_id" json:"municipality_id" toml:"municipality_id" yaml:"municipality_id"`
	TownAreaID     int       `boil:"town_area_id" json:"town_area_id" toml:"town_area_id" yaml:"town_area_id"`

	R *postalCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postalCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostalCodeColumns = struct {
	ID             string
	Number         string
	CreatedAt      string
	UpdatedAt      string
	PrefectureID   string
	MunicipalityID string
	TownAreaID     string
}{
	ID:             "id",
	Number:         "number",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	PrefectureID:   "prefecture_id",
	MunicipalityID: "municipality_id",
	TownAreaID:     "town_area_id",
}

var PostalCodeTableColumns = struct {
	ID             string
	Number         string
	CreatedAt      string
	UpdatedAt      string
	PrefectureID   string
	MunicipalityID string
	TownAreaID     string
}{
	ID:             "postal_codes.id",
	Number:         "postal_codes.number",
	CreatedAt:      "postal_codes.created_at",
	UpdatedAt:      "postal_codes.updated_at",
	PrefectureID:   "postal_codes.prefecture_id",
	MunicipalityID: "postal_codes.municipality_id",
	TownAreaID:     "postal_codes.town_area_id",
}

// Generated where

var PostalCodeWhere = struct {
	ID             whereHelperint
	Number         whereHelperint
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	PrefectureID   whereHelperint
	MunicipalityID whereHelperint
	TownAreaID     whereHelperint
}{
	ID:             whereHelperint{field: "`postal_codes`.`id`"},
	Number:         whereHelperint{field: "`postal_codes`.`number`"},
	CreatedAt:      whereHelpertime_Time{field: "`postal_codes`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`postal_codes`.`updated_at`"},
	PrefectureID:   whereHelperint{field: "`postal_codes`.`prefecture_id`"},
	MunicipalityID: whereHelperint{field: "`postal_codes`.`municipality_id`"},
	TownAreaID:     whereHelperint{field: "`postal_codes`.`town_area_id`"},
}

// PostalCodeRels is where relationship names are stored.
var PostalCodeRels = struct {
	Prefecture   string
	Municipality string
	TownArea     string
}{
	Prefecture:   "Prefecture",
	Municipality: "Municipality",
	TownArea:     "TownArea",
}

// postalCodeR is where relationships are stored.
type postalCodeR struct {
	Prefecture   *Prefecture   `boil:"Prefecture" json:"Prefecture" toml:"Prefecture" yaml:"Prefecture"`
	Municipality *Municipality `boil:"Municipality" json:"Municipality" toml:"Municipality" yaml:"Municipality"`
	TownArea     *TownArea     `boil:"TownArea" json:"TownArea" toml:"TownArea" yaml:"TownArea"`
}

// NewStruct creates a new relationship struct
func (*postalCodeR) NewStruct() *postalCodeR {
	return &postalCodeR{}
}

// postalCodeL is where Load methods for each relationship are stored.
type postalCodeL struct{}

var (
	postalCodeAllColumns            = []string{"id", "number", "created_at", "updated_at", "prefecture_id", "municipality_id", "town_area_id"}
	postalCodeColumnsWithoutDefault = []string{"number", "prefecture_id", "municipality_id", "town_area_id"}
	postalCodeColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	postalCodePrimaryKeyColumns     = []string{"id"}
)

type (
	// PostalCodeSlice is an alias for a slice of pointers to PostalCode.
	// This should almost always be used instead of []PostalCode.
	PostalCodeSlice []*PostalCode
	// PostalCodeHook is the signature for custom PostalCode hook methods
	PostalCodeHook func(context.Context, boil.ContextExecutor, *PostalCode) error

	postalCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postalCodeType                 = reflect.TypeOf(&PostalCode{})
	postalCodeMapping              = queries.MakeStructMapping(postalCodeType)
	postalCodePrimaryKeyMapping, _ = queries.BindMapping(postalCodeType, postalCodeMapping, postalCodePrimaryKeyColumns)
	postalCodeInsertCacheMut       sync.RWMutex
	postalCodeInsertCache          = make(map[string]insertCache)
	postalCodeUpdateCacheMut       sync.RWMutex
	postalCodeUpdateCache          = make(map[string]updateCache)
	postalCodeUpsertCacheMut       sync.RWMutex
	postalCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postalCodeBeforeInsertHooks []PostalCodeHook
var postalCodeBeforeUpdateHooks []PostalCodeHook
var postalCodeBeforeDeleteHooks []PostalCodeHook
var postalCodeBeforeUpsertHooks []PostalCodeHook

var postalCodeAfterInsertHooks []PostalCodeHook
var postalCodeAfterSelectHooks []PostalCodeHook
var postalCodeAfterUpdateHooks []PostalCodeHook
var postalCodeAfterDeleteHooks []PostalCodeHook
var postalCodeAfterUpsertHooks []PostalCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostalCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostalCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostalCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostalCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostalCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostalCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostalCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostalCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostalCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postalCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostalCodeHook registers your hook function for all future operations.
func AddPostalCodeHook(hookPoint boil.HookPoint, postalCodeHook PostalCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		postalCodeBeforeInsertHooks = append(postalCodeBeforeInsertHooks, postalCodeHook)
	case boil.BeforeUpdateHook:
		postalCodeBeforeUpdateHooks = append(postalCodeBeforeUpdateHooks, postalCodeHook)
	case boil.BeforeDeleteHook:
		postalCodeBeforeDeleteHooks = append(postalCodeBeforeDeleteHooks, postalCodeHook)
	case boil.BeforeUpsertHook:
		postalCodeBeforeUpsertHooks = append(postalCodeBeforeUpsertHooks, postalCodeHook)
	case boil.AfterInsertHook:
		postalCodeAfterInsertHooks = append(postalCodeAfterInsertHooks, postalCodeHook)
	case boil.AfterSelectHook:
		postalCodeAfterSelectHooks = append(postalCodeAfterSelectHooks, postalCodeHook)
	case boil.AfterUpdateHook:
		postalCodeAfterUpdateHooks = append(postalCodeAfterUpdateHooks, postalCodeHook)
	case boil.AfterDeleteHook:
		postalCodeAfterDeleteHooks = append(postalCodeAfterDeleteHooks, postalCodeHook)
	case boil.AfterUpsertHook:
		postalCodeAfterUpsertHooks = append(postalCodeAfterUpsertHooks, postalCodeHook)
	}
}

// One returns a single postalCode record from the query.
func (q postalCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostalCode, error) {
	o := &PostalCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for postal_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostalCode records from the query.
func (q postalCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostalCodeSlice, error) {
	var o []*PostalCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostalCode slice")
	}

	if len(postalCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostalCode records in the query.
func (q postalCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count postal_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postalCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if postal_codes exists")
	}

	return count > 0, nil
}

// Prefecture pointed to by the foreign key.
func (o *PostalCode) Prefecture(mods ...qm.QueryMod) prefectureQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PrefectureID),
	}

	queryMods = append(queryMods, mods...)

	query := Prefectures(queryMods...)
	queries.SetFrom(query.Query, "`prefectures`")

	return query
}

// Municipality pointed to by the foreign key.
func (o *PostalCode) Municipality(mods ...qm.QueryMod) municipalityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.MunicipalityID),
	}

	queryMods = append(queryMods, mods...)

	query := Municipalities(queryMods...)
	queries.SetFrom(query.Query, "`municipalities`")

	return query
}

// TownArea pointed to by the foreign key.
func (o *PostalCode) TownArea(mods ...qm.QueryMod) townAreaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TownAreaID),
	}

	queryMods = append(queryMods, mods...)

	query := TownAreas(queryMods...)
	queries.SetFrom(query.Query, "`town_areas`")

	return query
}

// LoadPrefecture allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postalCodeL) LoadPrefecture(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostalCode interface{}, mods queries.Applicator) error {
	var slice []*PostalCode
	var object *PostalCode

	if singular {
		object = maybePostalCode.(*PostalCode)
	} else {
		slice = *maybePostalCode.(*[]*PostalCode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postalCodeR{}
		}
		args = append(args, object.PrefectureID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postalCodeR{}
			}

			for _, a := range args {
				if a == obj.PrefectureID {
					continue Outer
				}
			}

			args = append(args, obj.PrefectureID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`prefectures`),
		qm.WhereIn(`prefectures.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Prefecture")
	}

	var resultSlice []*Prefecture
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Prefecture")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for prefectures")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for prefectures")
	}

	if len(postalCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Prefecture = foreign
		if foreign.R == nil {
			foreign.R = &prefectureR{}
		}
		foreign.R.PostalCodes = append(foreign.R.PostalCodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PrefectureID == foreign.ID {
				local.R.Prefecture = foreign
				if foreign.R == nil {
					foreign.R = &prefectureR{}
				}
				foreign.R.PostalCodes = append(foreign.R.PostalCodes, local)
				break
			}
		}
	}

	return nil
}

// LoadMunicipality allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postalCodeL) LoadMunicipality(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostalCode interface{}, mods queries.Applicator) error {
	var slice []*PostalCode
	var object *PostalCode

	if singular {
		object = maybePostalCode.(*PostalCode)
	} else {
		slice = *maybePostalCode.(*[]*PostalCode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postalCodeR{}
		}
		args = append(args, object.MunicipalityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postalCodeR{}
			}

			for _, a := range args {
				if a == obj.MunicipalityID {
					continue Outer
				}
			}

			args = append(args, obj.MunicipalityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`municipalities`),
		qm.WhereIn(`municipalities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Municipality")
	}

	var resultSlice []*Municipality
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Municipality")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for municipalities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for municipalities")
	}

	if len(postalCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Municipality = foreign
		if foreign.R == nil {
			foreign.R = &municipalityR{}
		}
		foreign.R.PostalCodes = append(foreign.R.PostalCodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MunicipalityID == foreign.ID {
				local.R.Municipality = foreign
				if foreign.R == nil {
					foreign.R = &municipalityR{}
				}
				foreign.R.PostalCodes = append(foreign.R.PostalCodes, local)
				break
			}
		}
	}

	return nil
}

// LoadTownArea allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postalCodeL) LoadTownArea(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostalCode interface{}, mods queries.Applicator) error {
	var slice []*PostalCode
	var object *PostalCode

	if singular {
		object = maybePostalCode.(*PostalCode)
	} else {
		slice = *maybePostalCode.(*[]*PostalCode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postalCodeR{}
		}
		args = append(args, object.TownAreaID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postalCodeR{}
			}

			for _, a := range args {
				if a == obj.TownAreaID {
					continue Outer
				}
			}

			args = append(args, obj.TownAreaID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`town_areas`),
		qm.WhereIn(`town_areas.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TownArea")
	}

	var resultSlice []*TownArea
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TownArea")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for town_areas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for town_areas")
	}

	if len(postalCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TownArea = foreign
		if foreign.R == nil {
			foreign.R = &townAreaR{}
		}
		foreign.R.PostalCodes = append(foreign.R.PostalCodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TownAreaID == foreign.ID {
				local.R.TownArea = foreign
				if foreign.R == nil {
					foreign.R = &townAreaR{}
				}
				foreign.R.PostalCodes = append(foreign.R.PostalCodes, local)
				break
			}
		}
	}

	return nil
}

// SetPrefecture of the postalCode to the related item.
// Sets o.R.Prefecture to related.
// Adds o to related.R.PostalCodes.
func (o *PostalCode) SetPrefecture(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Prefecture) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `postal_codes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"prefecture_id"}),
		strmangle.WhereClause("`", "`", 0, postalCodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PrefectureID = related.ID
	if o.R == nil {
		o.R = &postalCodeR{
			Prefecture: related,
		}
	} else {
		o.R.Prefecture = related
	}

	if related.R == nil {
		related.R = &prefectureR{
			PostalCodes: PostalCodeSlice{o},
		}
	} else {
		related.R.PostalCodes = append(related.R.PostalCodes, o)
	}

	return nil
}

// SetMunicipality of the postalCode to the related item.
// Sets o.R.Municipality to related.
// Adds o to related.R.PostalCodes.
func (o *PostalCode) SetMunicipality(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Municipality) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `postal_codes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"municipality_id"}),
		strmangle.WhereClause("`", "`", 0, postalCodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MunicipalityID = related.ID
	if o.R == nil {
		o.R = &postalCodeR{
			Municipality: related,
		}
	} else {
		o.R.Municipality = related
	}

	if related.R == nil {
		related.R = &municipalityR{
			PostalCodes: PostalCodeSlice{o},
		}
	} else {
		related.R.PostalCodes = append(related.R.PostalCodes, o)
	}

	return nil
}

// SetTownArea of the postalCode to the related item.
// Sets o.R.TownArea to related.
// Adds o to related.R.PostalCodes.
func (o *PostalCode) SetTownArea(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TownArea) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `postal_codes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"town_area_id"}),
		strmangle.WhereClause("`", "`", 0, postalCodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TownAreaID = related.ID
	if o.R == nil {
		o.R = &postalCodeR{
			TownArea: related,
		}
	} else {
		o.R.TownArea = related
	}

	if related.R == nil {
		related.R = &townAreaR{
			PostalCodes: PostalCodeSlice{o},
		}
	} else {
		related.R.PostalCodes = append(related.R.PostalCodes, o)
	}

	return nil
}

// PostalCodes retrieves all the records using an executor.
func PostalCodes(mods ...qm.QueryMod) postalCodeQuery {
	mods = append(mods, qm.From("`postal_codes`"))
	return postalCodeQuery{NewQuery(mods...)}
}

// FindPostalCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostalCode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PostalCode, error) {
	postalCodeObj := &PostalCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `postal_codes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postalCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from postal_codes")
	}

	if err = postalCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postalCodeObj, err
	}

	return postalCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostalCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no postal_codes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postalCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postalCodeInsertCacheMut.RLock()
	cache, cached := postalCodeInsertCache[key]
	postalCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postalCodeAllColumns,
			postalCodeColumnsWithDefault,
			postalCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postalCodeType, postalCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postalCodeType, postalCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `postal_codes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `postal_codes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `postal_codes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, postalCodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into postal_codes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postalCodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for postal_codes")
	}

CacheNoHooks:
	if !cached {
		postalCodeInsertCacheMut.Lock()
		postalCodeInsertCache[key] = cache
		postalCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostalCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostalCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postalCodeUpdateCacheMut.RLock()
	cache, cached := postalCodeUpdateCache[key]
	postalCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postalCodeAllColumns,
			postalCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update postal_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `postal_codes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, postalCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postalCodeType, postalCodeMapping, append(wl, postalCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update postal_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for postal_codes")
	}

	if !cached {
		postalCodeUpdateCacheMut.Lock()
		postalCodeUpdateCache[key] = cache
		postalCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postalCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for postal_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for postal_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostalCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postalCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `postal_codes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postalCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postalCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postalCode")
	}
	return rowsAff, nil
}

var mySQLPostalCodeUniqueColumns = []string{
	"id",
	"number",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostalCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no postal_codes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postalCodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPostalCodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postalCodeUpsertCacheMut.RLock()
	cache, cached := postalCodeUpsertCache[key]
	postalCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			postalCodeAllColumns,
			postalCodeColumnsWithDefault,
			postalCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			postalCodeAllColumns,
			postalCodePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert postal_codes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`postal_codes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `postal_codes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(postalCodeType, postalCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postalCodeType, postalCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for postal_codes")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == postalCodeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(postalCodeType, postalCodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for postal_codes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for postal_codes")
	}

CacheNoHooks:
	if !cached {
		postalCodeUpsertCacheMut.Lock()
		postalCodeUpsertCache[key] = cache
		postalCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostalCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostalCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostalCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postalCodePrimaryKeyMapping)
	sql := "DELETE FROM `postal_codes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from postal_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for postal_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postalCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postalCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postal_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for postal_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostalCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postalCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postalCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `postal_codes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postalCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postalCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for postal_codes")
	}

	if len(postalCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostalCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostalCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostalCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostalCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postalCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `postal_codes`.* FROM `postal_codes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postalCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostalCodeSlice")
	}

	*o = slice

	return nil
}

// PostalCodeExists checks if the PostalCode row exists.
func PostalCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `postal_codes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if postal_codes exists")
	}

	return exists, nil
}
